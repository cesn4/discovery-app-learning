{"expireTime":9007200836941216000,"key":"gatsby-plugin-mdx-entire-payload-65714b63cbe85de561b186feeac28d1e-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"C:/Users/cesn4/Documents/Projects/discovery-app-learning/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":135,"offset":136},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":138},"end":{"line":5,"column":29,"offset":166},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Discovery learning APP","position":{"start":{"line":7,"column":3,"offset":170},"end":{"line":7,"column":25,"offset":192},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":168},"end":{"line":7,"column":25,"offset":192},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This repository contains ","position":{"start":{"line":8,"column":1,"offset":194},"end":{"line":8,"column":26,"offset":219},"indent":[]}},{"type":"inlineCode","value":"react","position":{"start":{"line":8,"column":26,"offset":219},"end":{"line":8,"column":33,"offset":226},"indent":[]}},{"type":"text","value":" front-end app.","position":{"start":{"line":8,"column":33,"offset":226},"end":{"line":8,"column":48,"offset":241},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":194},"end":{"line":8,"column":48,"offset":241},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Structure","position":{"start":{"line":10,"column":3,"offset":247},"end":{"line":10,"column":12,"offset":256},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":245},"end":{"line":10,"column":12,"offset":256},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"/assets : contains images used for app;","position":{"start":{"line":11,"column":3,"offset":260},"end":{"line":11,"column":42,"offset":299},"indent":[]}}],"position":{"start":{"line":11,"column":3,"offset":260},"end":{"line":11,"column":42,"offset":299},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":258},"end":{"line":11,"column":42,"offset":299},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"/components  : representational UI components only;","position":{"start":{"line":12,"column":3,"offset":303},"end":{"line":12,"column":54,"offset":354},"indent":[]}}],"position":{"start":{"line":12,"column":3,"offset":303},"end":{"line":12,"column":54,"offset":354},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":301},"end":{"line":12,"column":54,"offset":354},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"/config :  configuration used for project;","position":{"start":{"line":13,"column":3,"offset":358},"end":{"line":13,"column":45,"offset":400},"indent":[]}}],"position":{"start":{"line":13,"column":3,"offset":358},"end":{"line":13,"column":45,"offset":400},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":356},"end":{"line":13,"column":45,"offset":400},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"/declaration : project global typescript declarations;","position":{"start":{"line":14,"column":3,"offset":404},"end":{"line":14,"column":57,"offset":458},"indent":[]}}],"position":{"start":{"line":14,"column":3,"offset":404},"end":{"line":14,"column":57,"offset":458},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":402},"end":{"line":14,"column":57,"offset":458},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"/sections : pieces of the pages made from components;","position":{"start":{"line":15,"column":3,"offset":462},"end":{"line":15,"column":56,"offset":515},"indent":[]}}],"position":{"start":{"line":15,"column":3,"offset":462},"end":{"line":15,"column":56,"offset":515},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":460},"end":{"line":15,"column":56,"offset":515},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"/sytles : contains reset, colours, sizes, fonts, spacing, global project syles and other variables used in project;","position":{"start":{"line":16,"column":3,"offset":519},"end":{"line":16,"column":118,"offset":634},"indent":[]}}],"position":{"start":{"line":16,"column":3,"offset":519},"end":{"line":16,"column":118,"offset":634},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":517},"end":{"line":16,"column":118,"offset":634},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"/views : pages of the app made from sections that correspond with the url route.","position":{"start":{"line":17,"column":3,"offset":638},"end":{"line":17,"column":83,"offset":718},"indent":[]}}],"position":{"start":{"line":17,"column":3,"offset":638},"end":{"line":17,"column":83,"offset":718},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":636},"end":{"line":17,"column":83,"offset":718},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":258},"end":{"line":17,"column":83,"offset":718},"indent":[1,1,1,1,1,1]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Run the project","position":{"start":{"line":19,"column":3,"offset":724},"end":{"line":19,"column":18,"offset":739},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":722},"end":{"line":19,"column":18,"offset":739},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"open ","position":{"start":{"line":20,"column":1,"offset":741},"end":{"line":20,"column":6,"offset":746},"indent":[]}},{"type":"inlineCode","value":"discovery-app-learning","position":{"start":{"line":20,"column":6,"offset":746},"end":{"line":20,"column":30,"offset":770},"indent":[]}},{"type":"text","value":" folder ","position":{"start":{"line":20,"column":30,"offset":770},"end":{"line":20,"column":38,"offset":778},"indent":[]}},{"type":"inlineCode","value":"npm install","position":{"start":{"line":20,"column":38,"offset":778},"end":{"line":20,"column":51,"offset":791},"indent":[]}},{"type":"text","value":" then ","position":{"start":{"line":20,"column":51,"offset":791},"end":{"line":20,"column":57,"offset":797},"indent":[]}},{"type":"inlineCode","value":"npm run dev","position":{"start":{"line":20,"column":57,"offset":797},"end":{"line":20,"column":70,"offset":810},"indent":[]}},{"type":"text","value":" for development and ","position":{"start":{"line":20,"column":70,"offset":810},"end":{"line":20,"column":91,"offset":831},"indent":[]}},{"type":"inlineCode","value":"npm run build","position":{"start":{"line":20,"column":91,"offset":831},"end":{"line":20,"column":106,"offset":846},"indent":[]}},{"type":"text","value":" for deployment.","position":{"start":{"line":20,"column":106,"offset":846},"end":{"line":20,"column":122,"offset":862},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":741},"end":{"line":20,"column":122,"offset":862},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Testing","position":{"start":{"line":22,"column":3,"offset":868},"end":{"line":22,"column":10,"offset":875},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":866},"end":{"line":22,"column":10,"offset":875},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Backstop","position":{"start":{"line":23,"column":5,"offset":881},"end":{"line":23,"column":13,"offset":889},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":877},"end":{"line":23,"column":13,"offset":889},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/garris/BackstopJS","children":[{"type":"text","value":"BackstopJS","position":{"start":{"line":24,"column":2,"offset":892},"end":{"line":24,"column":12,"offset":902},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":891},"end":{"line":24,"column":51,"offset":941},"indent":[]}},{"type":"text","value":" will assist you with visual regression, on push to origin it will show you what changed since last push, and will help you identify if all changes were intentional. In order for this to work this is how you have to use it:\n1. On creating a new branch make sure the project is running ","position":{"start":{"line":24,"column":51,"offset":941},"end":{"line":25,"column":62,"offset":1227},"indent":[1]}},{"type":"inlineCode","value":"npm run dev","position":{"start":{"line":25,"column":62,"offset":1227},"end":{"line":25,"column":75,"offset":1240},"indent":[]}},{"type":"text","value":" then run ","position":{"start":{"line":25,"column":75,"offset":1240},"end":{"line":25,"column":85,"offset":1250},"indent":[]}},{"type":"inlineCode","value":"npm run backstop:reference","position":{"start":{"line":25,"column":85,"offset":1250},"end":{"line":25,"column":113,"offset":1278},"indent":[]}},{"type":"text","value":" - this will make a snapshot of the page before changes.\n2. When you are happy with the changes and push it to origin, it will automatically run ","position":{"start":{"line":25,"column":113,"offset":1278},"end":{"line":26,"column":89,"offset":1424},"indent":[1]}},{"type":"inlineCode","value":"npm run backstop:test","position":{"start":{"line":26,"column":89,"offset":1424},"end":{"line":26,"column":112,"offset":1447},"indent":[]}},{"type":"text","value":" and shortly after you should get a visual output in the browser, showing you what changed. NOTE: it will not push to origin if there are differences!(see next step how to fix).\n3. If you see that everything changed that you wanted to, run ","position":{"start":{"line":26,"column":112,"offset":1447},"end":{"line":27,"column":63,"offset":1688},"indent":[1]}},{"type":"inlineCode","value":"npm run backstop:approve","position":{"start":{"line":27,"column":63,"offset":1688},"end":{"line":27,"column":89,"offset":1714},"indent":[]}},{"type":"text","value":" and then try to push it again, it should push properly and give you a 0 fail visual output.","position":{"start":{"line":27,"column":89,"offset":1714},"end":{"line":27,"column":181,"offset":1806},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":891},"end":{"line":27,"column":181,"offset":1806},"indent":[1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Unit Tests","position":{"start":{"line":29,"column":5,"offset":1814},"end":{"line":29,"column":15,"offset":1824},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":1810},"end":{"line":29,"column":15,"offset":1824},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://jestjs.io/en/","children":[{"type":"text","value":"Jest","position":{"start":{"line":30,"column":2,"offset":1827},"end":{"line":30,"column":6,"offset":1831},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":1826},"end":{"line":30,"column":30,"offset":1855},"indent":[]}},{"type":"text","value":" is used as a primary testing engine. ","position":{"start":{"line":30,"column":30,"offset":1855},"end":{"line":30,"column":68,"offset":1893},"indent":[]}},{"type":"link","title":null,"url":"https://airbnb.io/enzyme/","children":[{"type":"text","value":"Enzyme","position":{"start":{"line":30,"column":69,"offset":1894},"end":{"line":30,"column":75,"offset":1900},"indent":[]}}],"position":{"start":{"line":30,"column":68,"offset":1893},"end":{"line":30,"column":103,"offset":1928},"indent":[]}},{"type":"text","value":" is also added as testing extension, and will be mosty used for its ","position":{"start":{"line":30,"column":103,"offset":1928},"end":{"line":30,"column":171,"offset":1996},"indent":[]}},{"type":"inlineCode","value":"import { shallow } from 'enzyme';","position":{"start":{"line":30,"column":171,"offset":1996},"end":{"line":30,"column":206,"offset":2031},"indent":[]}},{"type":"text","value":" module to render react components.","position":{"start":{"line":30,"column":206,"offset":2031},"end":{"line":30,"column":241,"offset":2066},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":1826},"end":{"line":30,"column":241,"offset":2066},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"Writing tests:","position":{"start":{"line":32,"column":6,"offset":2075},"end":{"line":32,"column":20,"offset":2089},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":2070},"end":{"line":32,"column":20,"offset":2089},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Inside the folder of ","position":{"start":{"line":33,"column":4,"offset":2094},"end":{"line":33,"column":25,"offset":2115},"indent":[]}},{"type":"inlineCode","value":"/component","position":{"start":{"line":33,"column":25,"offset":2115},"end":{"line":33,"column":37,"offset":2127},"indent":[]}},{"type":"text","value":" | ","position":{"start":{"line":33,"column":37,"offset":2127},"end":{"line":33,"column":40,"offset":2130},"indent":[]}},{"type":"inlineCode","value":"/container","position":{"start":{"line":33,"column":40,"offset":2130},"end":{"line":33,"column":52,"offset":2142},"indent":[]}},{"type":"text","value":" | ","position":{"start":{"line":33,"column":52,"offset":2142},"end":{"line":33,"column":55,"offset":2145},"indent":[]}},{"type":"inlineCode","value":"/view","position":{"start":{"line":33,"column":55,"offset":2145},"end":{"line":33,"column":62,"offset":2152},"indent":[]}},{"type":"text","value":" | ","position":{"start":{"line":33,"column":62,"offset":2152},"end":{"line":33,"column":65,"offset":2155},"indent":[]}},{"type":"inlineCode","value":"...","position":{"start":{"line":33,"column":65,"offset":2155},"end":{"line":33,"column":70,"offset":2160},"indent":[]}},{"type":"text","value":" create a directory ","position":{"start":{"line":33,"column":70,"offset":2160},"end":{"line":33,"column":90,"offset":2180},"indent":[]}},{"type":"inlineCode","value":"__tests__","position":{"start":{"line":33,"column":90,"offset":2180},"end":{"line":33,"column":101,"offset":2191},"indent":[]}},{"type":"text","value":" and inside of it create a test file containing the name of the component ","position":{"start":{"line":33,"column":101,"offset":2191},"end":{"line":33,"column":175,"offset":2265},"indent":[]}},{"type":"inlineCode","value":"ComponentName.test.(tsx | ts)","position":{"start":{"line":33,"column":175,"offset":2265},"end":{"line":33,"column":206,"offset":2296},"indent":[]}},{"type":"text","value":";","position":{"start":{"line":33,"column":206,"offset":2296},"end":{"line":33,"column":207,"offset":2297},"indent":[]}}],"position":{"start":{"line":33,"column":4,"offset":2094},"end":{"line":33,"column":207,"offset":2297},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":2091},"end":{"line":33,"column":207,"offset":2297},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Inside that fille eg.:","position":{"start":{"line":34,"column":4,"offset":2302},"end":{"line":34,"column":26,"offset":2324},"indent":[]}}],"position":{"start":{"line":34,"column":4,"offset":2302},"end":{"line":34,"column":26,"offset":2324},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":2299},"end":{"line":34,"column":26,"offset":2324},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":2091},"end":{"line":34,"column":26,"offset":2324},"indent":[1]}},{"type":"code","lang":null,"meta":null,"value":"import React from 'react';\nimport { shallow } from 'enzyme';\nimport Time from '../Time';\n\ndescribe('Time component', () => {\n    it('Should render text', () => {\n        const testTest = 'Test text';\n        const wrapper = shallow(<Time text={testTest} />);\n        expect(wrapper.find('.time__clock-time').text()).toEqual(testTest);\n    });\n});","position":{"start":{"line":35,"column":1,"offset":2326},"end":{"line":47,"column":4,"offset":2692},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"list","ordered":true,"start":3,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Test file should contain one ","position":{"start":{"line":48,"column":4,"offset":2697},"end":{"line":48,"column":33,"offset":2726},"indent":[]}},{"type":"inlineCode","value":"describe","position":{"start":{"line":48,"column":33,"offset":2726},"end":{"line":48,"column":43,"offset":2736},"indent":[]}},{"type":"text","value":" statment with component name in the description. And ","position":{"start":{"line":48,"column":43,"offset":2736},"end":{"line":48,"column":97,"offset":2790},"indent":[]}},{"type":"inlineCode","value":"it","position":{"start":{"line":48,"column":97,"offset":2790},"end":{"line":48,"column":101,"offset":2794},"indent":[]}},{"type":"text","value":" statement for each prop or case you are trying to test, also with appropriate description of what are you testing.","position":{"start":{"line":48,"column":101,"offset":2794},"end":{"line":48,"column":216,"offset":2909},"indent":[]}}],"position":{"start":{"line":48,"column":4,"offset":2697},"end":{"line":48,"column":216,"offset":2909},"indent":[]}}],"position":{"start":{"line":48,"column":1,"offset":2694},"end":{"line":48,"column":216,"offset":2909},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Tests should be written for every prop in the component.","position":{"start":{"line":49,"column":4,"offset":2914},"end":{"line":49,"column":60,"offset":2970},"indent":[]}}],"position":{"start":{"line":49,"column":4,"offset":2914},"end":{"line":49,"column":60,"offset":2970},"indent":[]}}],"position":{"start":{"line":49,"column":1,"offset":2911},"end":{"line":49,"column":60,"offset":2970},"indent":[]}}],"position":{"start":{"line":48,"column":1,"offset":2694},"end":{"line":49,"column":60,"offset":2970},"indent":[1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":52,"column":1,"offset":2974},"end":{"line":52,"column":31,"offset":3004},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":52,"column":31,"offset":3004}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"C:/Users/cesn4/Documents/Projects/discovery-app-learning/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"discovery-learning-app\"\n    }}>{`Discovery learning APP`}</h1>\n    <p>{`This repository contains `}<inlineCode parentName=\"p\">{`react`}</inlineCode>{` front-end app.`}</p>\n    <h1 {...{\n      \"id\": \"structure\"\n    }}>{`Structure`}</h1>\n    <ul>\n      <li parentName=\"ul\">{`/assets : contains images used for app;`}</li>\n      <li parentName=\"ul\">{`/components  : representational UI components only;`}</li>\n      <li parentName=\"ul\">{`/config :  configuration used for project;`}</li>\n      <li parentName=\"ul\">{`/declaration : project global typescript declarations;`}</li>\n      <li parentName=\"ul\">{`/sections : pieces of the pages made from components;`}</li>\n      <li parentName=\"ul\">{`/sytles : contains reset, colours, sizes, fonts, spacing, global project syles and other variables used in project;`}</li>\n      <li parentName=\"ul\">{`/views : pages of the app made from sections that correspond with the url route.`}</li>\n    </ul>\n    <h1 {...{\n      \"id\": \"run-the-project\"\n    }}>{`Run the project`}</h1>\n    <p>{`open `}<inlineCode parentName=\"p\">{`discovery-app-learning`}</inlineCode>{` folder `}<inlineCode parentName=\"p\">{`npm install`}</inlineCode>{` then `}<inlineCode parentName=\"p\">{`npm run dev`}</inlineCode>{` for development and `}<inlineCode parentName=\"p\">{`npm run build`}</inlineCode>{` for deployment.`}</p>\n    <h1 {...{\n      \"id\": \"testing\"\n    }}>{`Testing`}</h1>\n    <h3 {...{\n      \"id\": \"backstop\"\n    }}>{`Backstop`}</h3>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://github.com/garris/BackstopJS\"\n      }}>{`BackstopJS`}</a>{` will assist you with visual regression, on push to origin it will show you what changed since last push, and will help you identify if all changes were intentional. In order for this to work this is how you have to use it:\n1. On creating a new branch make sure the project is running `}<inlineCode parentName=\"p\">{`npm run dev`}</inlineCode>{` then run `}<inlineCode parentName=\"p\">{`npm run backstop:reference`}</inlineCode>{` - this will make a snapshot of the page before changes.\n2. When you are happy with the changes and push it to origin, it will automatically run `}<inlineCode parentName=\"p\">{`npm run backstop:test`}</inlineCode>{` and shortly after you should get a visual output in the browser, showing you what changed. NOTE: it will not push to origin if there are differences!(see next step how to fix).\n3. If you see that everything changed that you wanted to, run `}<inlineCode parentName=\"p\">{`npm run backstop:approve`}</inlineCode>{` and then try to push it again, it should push properly and give you a 0 fail visual output.`}</p>\n    <h3 {...{\n      \"id\": \"unit-tests\"\n    }}>{`Unit Tests`}</h3>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://jestjs.io/en/\"\n      }}>{`Jest`}</a>{` is used as a primary testing engine. `}<a parentName=\"p\" {...{\n        \"href\": \"https://airbnb.io/enzyme/\"\n      }}>{`Enzyme`}</a>{` is also added as testing extension, and will be mosty used for its `}<inlineCode parentName=\"p\">{`import { shallow } from 'enzyme';`}</inlineCode>{` module to render react components.`}</p>\n    <h4 {...{\n      \"id\": \"writing-tests\"\n    }}>{`Writing tests:`}</h4>\n    <ol>\n      <li parentName=\"ol\">{`Inside the folder of `}<inlineCode parentName=\"li\">{`/component`}</inlineCode>{` | `}<inlineCode parentName=\"li\">{`/container`}</inlineCode>{` | `}<inlineCode parentName=\"li\">{`/view`}</inlineCode>{` | `}<inlineCode parentName=\"li\">{`...`}</inlineCode>{` create a directory `}<inlineCode parentName=\"li\">{`__tests__`}</inlineCode>{` and inside of it create a test file containing the name of the component `}<inlineCode parentName=\"li\">{`ComponentName.test.(tsx | ts)`}</inlineCode>{`;`}</li>\n      <li parentName=\"ol\">{`Inside that fille eg.:`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{}}>{`import React from 'react';\nimport { shallow } from 'enzyme';\nimport Time from '../Time';\n\ndescribe('Time component', () => {\n    it('Should render text', () => {\n        const testTest = 'Test text';\n        const wrapper = shallow(<Time text={testTest} />);\n        expect(wrapper.find('.time__clock-time').text()).toEqual(testTest);\n    });\n});\n`}</code></pre>\n    <ol {...{\n      \"start\": 3\n    }}>\n      <li parentName=\"ol\">{`Test file should contain one `}<inlineCode parentName=\"li\">{`describe`}</inlineCode>{` statment with component name in the description. And `}<inlineCode parentName=\"li\">{`it`}</inlineCode>{` statement for each prop or case you are trying to test, also with appropriate description of what are you testing.`}</li>\n      <li parentName=\"ol\">{`Tests should be written for every prop in the component.`}</li>\n    </ol>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}